import {
    FormatMessage, Message,
    FormatErreurRedhibitoire, ErreurRedhibitoire,
    FormatConfigurationInitiale, Configuration
} from "../reseau/formats";
import { messageAdmin, messageConnexion } from "../routage/commun/communRoutage"; // TODO



export class CanalClient<
    FE extends FormatErreurRedhibitoire, FC extends FormatConfigurationInitiale, // Format d'entrée
    FMIN extends FMOUT, FMOUT extends FormatMessage, // Formats d'entrée et de sortie
    EM extends string
    > {
    adresse: string;
    lienServeur: WebSocket;
    constructor(adresse: string) {
        this.adresse = adresse;
        this.lienServeur = new WebSocket('ws://' + this.adresse, 'echo-protocol');
    };

    // Effet : send(String)
    envoyerMessage(msg: Message<FMIN, FMOUT, EM>): void {
        this.lienServeur.send(msg.brut());
    };

    // Effet: enregistrement comme écouteur
    enregistrerTraitementMessageRecu(traitement: (m: FMIN) => void): void {
        this.lienServeur.addEventListener("message", function (e: MessageEvent) {
            let msg = JSON.parse(e.data);
            if (msg.configurationInitiale !== undefined) {
                return;
            }
            if (msg.erreurRedhibitoire !== undefined) {
                return;
            }
            traitement(<FMIN>msg);
        });
    };
    // Effet: enregistrement comme écouteur
    enregistrerTraitementConfigurationRecue(traitement: (c: FC) => void): void {
        this.lienServeur.addEventListener("message", function (e: MessageEvent) {
            let contenuJSON = JSON.parse(e.data);
            if (contenuJSON.configurationInitiale === undefined) {
                return;
            }
            traitement(<FC>contenuJSON);
        });
    };

    // Effet: enregistrement comme écouteur

    enregistrerTraitementAdmin(estAdmin : boolean): void {

        let lienServeur = this.lienServeur;
        this.lienServeur.addEventListener("open", function (e: MessageEvent) {
            if (estAdmin) {
                lienServeur.send(messageAdmin().brut());
            } else {
                lienServeur.send(messageConnexion().brut())
            }

        });
    };

    // Effet: enregistrement comme écouteur
    enregistrerTraitementErreurRecue(traitement: (e: FE) => void): void {
        this.lienServeur.addEventListener("message", function (e: MessageEvent) {
            let contenuJSON = JSON.parse(e.data);
            if (contenuJSON.erreurRedhibitoire === undefined) {
                return;
            }
            traitement(<FE>contenuJSON);
        });
    };

};

export function creerCanalClient<
    FE extends FormatErreurRedhibitoire, FC extends FormatConfigurationInitiale,
    FMIN extends FMOUT,
    FMOUT extends FormatMessage, EM extends string
    >(adresse: string) {
    return new CanalClient<FE, FC, FMIN, FMOUT, EM>(adresse);
}
